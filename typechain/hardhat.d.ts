/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "FixedPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedPoint__factory>;
    getContractFactory(
      name: "ExampleFlashSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleFlashSwap__factory>;
    getContractFactory(
      name: "ExampleOracleSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleOracleSimple__factory>;
    getContractFactory(
      name: "ExampleSlidingWindowOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleSlidingWindowOracle__factory>;
    getContractFactory(
      name: "ExampleSwapToPrice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleSwapToPrice__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ISaitaSwapCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISaitaSwapCallee__factory>;
    getContractFactory(
      name: "ISaitaSwapERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISaitaSwapERC20__factory>;
    getContractFactory(
      name: "ISaitaSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISaitaSwapFactory__factory>;
    getContractFactory(
      name: "ISaitaSwapMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISaitaSwapMigrator__factory>;
    getContractFactory(
      name: "ISaitaSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISaitaSwapPair__factory>;
    getContractFactory(
      name: "ISaitaSwapRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISaitaSwapRouter01__factory>;
    getContractFactory(
      name: "ISaitaSwapRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISaitaSwapRouter02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IUniswapV1Exchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV1Exchange__factory>;
    getContractFactory(
      name: "IUniswapV1Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV1Factory__factory>;
    getContractFactory(
      name: "ISaitaSwapRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISaitaSwapRouter01__factory>;
    getContractFactory(
      name: "ISaitaSwapRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISaitaSwapRouter02__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "SaitaSwapMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaitaSwapMigrator__factory>;
    getContractFactory(
      name: "SaitaSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaitaSwapRouter__factory>;
    getContractFactory(
      name: "SaitaSwapRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaitaSwapRouter01__factory>;
    getContractFactory(
      name: "DeflatingERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeflatingERC20__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "RouterEventEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RouterEventEmitter__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;

    getContractAt(
      name: "FixedPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedPoint>;
    getContractAt(
      name: "ExampleFlashSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleFlashSwap>;
    getContractAt(
      name: "ExampleOracleSimple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleOracleSimple>;
    getContractAt(
      name: "ExampleSlidingWindowOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleSlidingWindowOracle>;
    getContractAt(
      name: "ExampleSwapToPrice",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleSwapToPrice>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ISaitaSwapCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISaitaSwapCallee>;
    getContractAt(
      name: "ISaitaSwapERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISaitaSwapERC20>;
    getContractAt(
      name: "ISaitaSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISaitaSwapFactory>;
    getContractAt(
      name: "ISaitaSwapMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISaitaSwapMigrator>;
    getContractAt(
      name: "ISaitaSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISaitaSwapPair>;
    getContractAt(
      name: "ISaitaSwapRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISaitaSwapRouter01>;
    getContractAt(
      name: "ISaitaSwapRouter02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISaitaSwapRouter02>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IUniswapV1Exchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV1Exchange>;
    getContractAt(
      name: "IUniswapV1Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV1Factory>;
    getContractAt(
      name: "ISaitaSwapRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISaitaSwapRouter01>;
    getContractAt(
      name: "ISaitaSwapRouter02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISaitaSwapRouter02>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "SaitaSwapMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaitaSwapMigrator>;
    getContractAt(
      name: "SaitaSwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaitaSwapRouter>;
    getContractAt(
      name: "SaitaSwapRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaitaSwapRouter01>;
    getContractAt(
      name: "DeflatingERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeflatingERC20>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "RouterEventEmitter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RouterEventEmitter>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
